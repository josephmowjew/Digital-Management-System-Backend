// <auto-generated />
using System;
using DataStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241108092609_added attachment association to the generic signatures")]
    partial class addedattachmentassociationtothegenericsignatures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AttachmentCPDTraining", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("CPDTrainingsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "CPDTrainingsId");

                    b.HasIndex("CPDTrainingsId");

                    b.ToTable("AttachmentCPDTraining");
                });

            modelBuilder.Entity("AttachmentCPDTrainingRegistration", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("CPDTrainingRegistrationsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "CPDTrainingRegistrationsId");

                    b.HasIndex("CPDTrainingRegistrationsId");

                    b.ToTable("AttachmentCPDTrainingRegistration");
                });

            modelBuilder.Entity("AttachmentCommunicationMessage", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationMessagesId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "CommunicationMessagesId");

                    b.HasIndex("CommunicationMessagesId");

                    b.ToTable("AttachmentCommunicationMessage");
                });

            modelBuilder.Entity("AttachmentGenericSignature", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("GenericSignaturesId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "GenericSignaturesId");

                    b.HasIndex("GenericSignaturesId");

                    b.ToTable("AttachmentGenericSignature");
                });

            modelBuilder.Entity("AttachmentLevyDeclaration", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("LevyDeclarationsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "LevyDeclarationsId");

                    b.HasIndex("LevyDeclarationsId");

                    b.ToTable("AttachmentLevyDeclaration");
                });

            modelBuilder.Entity("AttachmentLicenseApplication", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseApplicationsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "LicenseApplicationsId");

                    b.HasIndex("LicenseApplicationsId");

                    b.ToTable("AttachmentLicenseApplication");
                });

            modelBuilder.Entity("AttachmentMemberQualification", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("MemberQualificationsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "MemberQualificationsId");

                    b.HasIndex("MemberQualificationsId");

                    b.ToTable("AttachmentMemberQualification");
                });

            modelBuilder.Entity("AttachmentMessage", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("MessagesId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("AttachmentMessage");
                });

            modelBuilder.Entity("AttachmentNotaryPublic", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("NotariesPublicId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "NotariesPublicId");

                    b.HasIndex("NotariesPublicId");

                    b.ToTable("AttachmentNotaryPublic");
                });

            modelBuilder.Entity("AttachmentPenalty", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("PenaltiesId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "PenaltiesId");

                    b.HasIndex("PenaltiesId");

                    b.ToTable("AttachmentPenalty");
                });

            modelBuilder.Entity("AttachmentPenaltyPayment", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyPaymentsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "PenaltyPaymentsId");

                    b.HasIndex("PenaltyPaymentsId");

                    b.ToTable("AttachmentPenaltyPayment");
                });

            modelBuilder.Entity("AttachmentProBono", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("ProBonosId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "ProBonosId");

                    b.HasIndex("ProBonosId");

                    b.ToTable("AttachmentProBono");
                });

            modelBuilder.Entity("AttachmentProBonoApplication", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("ProBonosApplicationsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "ProBonosApplicationsId");

                    b.HasIndex("ProBonosApplicationsId");

                    b.ToTable("AttachmentProBonoApplication");
                });

            modelBuilder.Entity("AttachmentProBonoReport", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("ProBonoReportsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "ProBonoReportsId");

                    b.HasIndex("ProBonoReportsId");

                    b.ToTable("AttachmentProBonoReport");
                });

            modelBuilder.Entity("AttachmentSignature", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("SignaturesId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "SignaturesId");

                    b.HasIndex("SignaturesId");

                    b.ToTable("AttachmentSignature");
                });

            modelBuilder.Entity("AttachmentStamp", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .HasColumnType("int");

                    b.Property<int>("StampsId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsId", "StampsId");

                    b.HasIndex("StampsId");

                    b.ToTable("AttachmentStamp");
                });

            modelBuilder.Entity("DataStore.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("IdentityExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IdentityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OtherName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SignatureData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FirmId");

                    b.HasIndex("IdentityTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TitleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DataStore.Core.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SubcommitteeMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("SubcommitteeMessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("DataStore.Core.Models.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccreditingInstitution")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AccreditingInstitutionRepresentativePosition")
                        .HasColumnType("longtext");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CPDUnitsAwarded")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateToBeConducted")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<bool>("IsFree")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("MemberPhysicalAttendanceFee")
                        .HasColumnType("double");

                    b.Property<double?>("MemberVirtualAttendanceFee")
                        .HasColumnType("double");

                    b.Property<double?>("NonMemberPhysicalAttendanceFee")
                        .HasColumnType("double");

                    b.Property<double?>("NonMemberVirtualAttandanceFee")
                        .HasColumnType("double");

                    b.Property<string>("PhysicalVenue")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProposedUnits")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("CPDTrainings");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDTrainingRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CPDTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfPayment")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedReason")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("Fee")
                        .HasColumnType("double");

                    b.Property<int?>("InvoiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CPDTrainingId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceRequestId");

                    b.HasIndex("MemberId");

                    b.ToTable("CPDTrainingRegistrations");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDUnitsEarned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CPDTrainingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UnitsEarned")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPDTrainingId");

                    b.HasIndex("MemberId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("CPDUnitsEarned");
                });

            modelBuilder.Entity("DataStore.Core.Models.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChairpersonID")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChairpersonID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("DataStore.Core.Models.CommitteeMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommitteeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MemberShipId")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MemberShipStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeID");

                    b.HasIndex("MemberShipId");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("DataStore.Core.Models.CommunicationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SentByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SentToAllUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetedDepartmentsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetedRolesJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SentByUserId");

                    b.ToTable("CommunicationMessages");
                });

            modelBuilder.Entity("DataStore.Core.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DataStore.Core.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataStore.Core.Models.EmailQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EmailQueues");
                });

            modelBuilder.Entity("DataStore.Core.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DetailedMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserFriendlyMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("DataStore.Core.Models.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PrimaryContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SecondaryContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("DataStore.Core.Models.GenericSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GenericSignatures");
                });

            modelBuilder.Entity("DataStore.Core.Models.IdentityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("IdentityTypes");
                });

            modelBuilder.Entity("DataStore.Core.Models.InvoiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .IsRequired()
                        .HasColumnType("double");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("QBInvoiceId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReferencedEntityId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferencedEntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QBInvoiceId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("InvoiceRequests");
                });

            modelBuilder.Entity("DataStore.Core.Models.LevyDeclaration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceRequestId")
                        .HasColumnType("int");

                    b.Property<decimal>("LevyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.HasIndex("InvoiceRequestId");

                    b.ToTable("LevyDeclarations");
                });

            modelBuilder.Entity("DataStore.Core.Models.LevyPercent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PercentageValue")
                        .HasColumnType("double");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("LevyPercents");
                });

            modelBuilder.Entity("DataStore.Core.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LicenseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicenseApplicationId")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("AttainedMinimumNumberOfCLEUnits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CertificateOfAdmission")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CompliedWithPenaltiesImposedUnderTheAct")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentApprovalLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExplanationForNoAccountantsCertificate")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoAnnualSubscriptionToSociety")
                        .HasColumnType("longtext");

                    b.Property<string>("ExplanationForNoComplianceWithPenalties")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoContributionToFidelityFund")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoContributionToMLSBuildingProjectFund")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoFullMandatoryProBonoWork")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoMinimumNumberOfCLEUnits")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoProfessionalIndemnityInsuranceCover")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoSocietysLevy")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNoValidTaxClearanceCertificate")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExplanationForNotSubmittingCertificateOfAdmission")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("FirstApplicationForLicense")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasValidAnnualProfessionalIndemnityInsuranceCover")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MadeContributionToFidelityFund")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MadeContributionToMLSBuildingProjectFund")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("ObtainedLeaveToRenewLicenseOutOfTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PaidAnnualSubscriptionToSociety")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PerformedFullMandatoryProBonoWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RemittedSocietysLevy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RenewedLicensePreviousYear")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("SubmittedAccountantsCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SubmittedValidTaxClearanceCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrentApprovalLevelID");

                    b.HasIndex("MemberId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("LicenseApplications");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApplicationApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LicenseApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("LicenseApprovalLevelID")
                        .HasColumnType("int");

                    b.Property<string>("Reason_for_Rejection")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LicenseApplicationID");

                    b.HasIndex("LicenseApprovalLevelID");

                    b.ToTable("LicenseApplicationApprovals");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApprovalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CommentedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalHistoryId");

                    b.HasIndex("CommentedById");

                    b.ToTable("LicenseApprovalComments");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApprovalLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LicenseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalLevelId");

                    b.HasIndex("ChangedById");

                    b.HasIndex("LicenseApplicationId");

                    b.ToTable("LicenseApprovalHistories");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("LicenseApprovalLevels");
                });

            modelBuilder.Entity("DataStore.Core.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateOfAdmissionToPractice")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ResidentialAddress")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FirmId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DataStore.Core.Models.MemberQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateObtained")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuingInstitution")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QualificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("MemberQualifications");
                });

            modelBuilder.Entity("DataStore.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommitteeID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ThreadId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataStore.Core.Models.NotaryPublic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("DeniedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("NotariesPublic");
                });

            modelBuilder.Entity("DataStore.Core.Models.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double");

                    b.Property<double>("AmountRemaining")
                        .HasColumnType("double");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Fee")
                        .HasColumnType("double");

                    b.Property<int?>("InvoiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("PenaltyStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PenaltyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResolutionComment")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceRequestId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PenaltyTypeId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("DataStore.Core.Models.PenaltyPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateDenied")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double>("Fee")
                        .HasColumnType("double");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PenaltyId")
                        .HasColumnType("int");

                    b.Property<string>("QBInvoiceId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReasonForDenial")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PenaltyId");

                    b.HasIndex("QBInvoiceId");

                    b.ToTable("PenaltyPayments");
                });

            modelBuilder.Entity("DataStore.Core.Models.PenaltyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PenaltyTypes");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CaseDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NatureOfDispute")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProBonoApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ProbonoClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SummaryOfDispute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProBonoApplicationId");

                    b.HasIndex("ProbonoClientId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("ProBonos");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBonoApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CaseDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NatureOfDispute")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProbonoClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SummaryOfDispute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProbonoClientId");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("ProBonoApplications");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBonoReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("ProBonoHours")
                        .HasColumnType("double");

                    b.Property<int>("ProBonoId")
                        .HasColumnType("int");

                    b.Property<double>("ProBonoProposedHours")
                        .HasColumnType("double");

                    b.Property<string>("ReportStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProBonoId");

                    b.ToTable("ProBonoReports");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProbonoClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OtherContacts")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("deleteRequest")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ProbonoClients");
                });

            modelBuilder.Entity("DataStore.Core.Models.PropBonoReportFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeedBackById")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProBonoReportId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FeedBackById");

                    b.HasIndex("ProBonoReportId");

                    b.ToTable("PropBonoReportFeedbacks");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BillingAddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAddressLine2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAddressLine3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAddressLine4")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAddressLine5")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("QBCustomers");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("QBInvoices");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("QBPayments");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("QBReceipts");
                });

            modelBuilder.Entity("DataStore.Core.Models.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("QualificationTypes");
                });

            modelBuilder.Entity("DataStore.Core.Models.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("DataStore.Core.Models.Stamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearOfOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearOfOperationId");

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("DataStore.Core.Models.Subcommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChairpersonId")
                        .HasColumnType("int");

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubcommitteeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChairpersonId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Subcommittees");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MemberShipId")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MemberShipStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubcommitteeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipId");

                    b.HasIndex("SubcommitteeID");

                    b.ToTable("SubcommitteeMemberships");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubcommitteeID")
                        .HasColumnType("int");

                    b.Property<int?>("SubcommitteeThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubcommitteeID");

                    b.HasIndex("SubcommitteeThreadId");

                    b.ToTable("SubcommitteeMessages");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubcommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubcommitteeId");

                    b.ToTable("SubcommitteeThreads");
                });

            modelBuilder.Entity("DataStore.Core.Models.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("DataStore.Core.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("DataStore.Core.Models.YearOfOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("YearOfOperations");
                });

            modelBuilder.Entity("MemberProBono", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("ProBonosId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "ProBonosId");

                    b.HasIndex("ProBonosId");

                    b.ToTable("MemberProBono");
                });

            modelBuilder.Entity("MemberQualificationType", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("QualificationTypesId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "QualificationTypesId");

                    b.HasIndex("QualificationTypesId");

                    b.ToTable("MemberQualificationType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("DataStore.Core.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("AttachmentCPDTraining", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.CPDTraining", null)
                        .WithMany()
                        .HasForeignKey("CPDTrainingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentCPDTrainingRegistration", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.CPDTrainingRegistration", null)
                        .WithMany()
                        .HasForeignKey("CPDTrainingRegistrationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentCommunicationMessage", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.CommunicationMessage", null)
                        .WithMany()
                        .HasForeignKey("CommunicationMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentGenericSignature", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.GenericSignature", null)
                        .WithMany()
                        .HasForeignKey("GenericSignaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentLevyDeclaration", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.LevyDeclaration", null)
                        .WithMany()
                        .HasForeignKey("LevyDeclarationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentLicenseApplication", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.LicenseApplication", null)
                        .WithMany()
                        .HasForeignKey("LicenseApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentMemberQualification", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.MemberQualification", null)
                        .WithMany()
                        .HasForeignKey("MemberQualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentMessage", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentNotaryPublic", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.NotaryPublic", null)
                        .WithMany()
                        .HasForeignKey("NotariesPublicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentPenalty", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Penalty", null)
                        .WithMany()
                        .HasForeignKey("PenaltiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentPenaltyPayment", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.PenaltyPayment", null)
                        .WithMany()
                        .HasForeignKey("PenaltyPaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentProBono", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProBono", null)
                        .WithMany()
                        .HasForeignKey("ProBonosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentProBonoApplication", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProBonoApplication", null)
                        .WithMany()
                        .HasForeignKey("ProBonosApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentProBonoReport", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProBonoReport", null)
                        .WithMany()
                        .HasForeignKey("ProBonoReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentSignature", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Signature", null)
                        .WithMany()
                        .HasForeignKey("SignaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentStamp", b =>
                {
                    b.HasOne("DataStore.Core.Models.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Stamp", null)
                        .WithMany()
                        .HasForeignKey("StampsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataStore.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("DataStore.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DataStore.Core.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Firm", null)
                        .WithMany("Users")
                        .HasForeignKey("FirmId");

                    b.HasOne("DataStore.Core.Models.IdentityType", "IdentityType")
                        .WithMany()
                        .HasForeignKey("IdentityTypeId");

                    b.HasOne("DataStore.Core.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Department");

                    b.Navigation("IdentityType");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DataStore.Core.Models.Attachment", b =>
                {
                    b.HasOne("DataStore.Core.Models.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.SubcommitteeMessage", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SubcommitteeMessageId");

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDTraining", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDTrainingRegistration", b =>
                {
                    b.HasOne("DataStore.Core.Models.CPDTraining", "CPDTraining")
                        .WithMany("CPDTrainingRegistration")
                        .HasForeignKey("CPDTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.InvoiceRequest", "InvoiceRequest")
                        .WithMany()
                        .HasForeignKey("InvoiceRequestId");

                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany("CPDTrainingRegistrations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPDTraining");

                    b.Navigation("CreatedBy");

                    b.Navigation("InvoiceRequest");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDUnitsEarned", b =>
                {
                    b.HasOne("DataStore.Core.Models.CPDTraining", "CPDTraining")
                        .WithMany("CPDUnitsEarned")
                        .HasForeignKey("CPDTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPDTraining");

                    b.Navigation("Member");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.Committee", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", "Chairperson")
                        .WithMany()
                        .HasForeignKey("ChairpersonID");

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Committees")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chairperson");

                    b.Navigation("CreatedBy");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.CommitteeMembership", b =>
                {
                    b.HasOne("DataStore.Core.Models.Committee", "Committee")
                        .WithMany("CommitteeMemberships")
                        .HasForeignKey("CommitteeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "MemberShip")
                        .WithMany()
                        .HasForeignKey("MemberShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("MemberShip");
                });

            modelBuilder.Entity("DataStore.Core.Models.CommunicationMessage", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "SentByUser")
                        .WithMany()
                        .HasForeignKey("SentByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SentByUser");
                });

            modelBuilder.Entity("DataStore.Core.Models.ErrorLog", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DataStore.Core.Models.Firm", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataStore.Core.Models.InvoiceRequest", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QBInvoice", "QBInvoice")
                        .WithMany()
                        .HasForeignKey("QBInvoiceId");

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("QBInvoice");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.LevyDeclaration", b =>
                {
                    b.HasOne("DataStore.Core.Models.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.InvoiceRequest", "InvoiceRequest")
                        .WithMany()
                        .HasForeignKey("InvoiceRequestId");

                    b.Navigation("Firm");

                    b.Navigation("InvoiceRequest");
                });

            modelBuilder.Entity("DataStore.Core.Models.LevyPercent", b =>
                {
                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.License", b =>
                {
                    b.HasOne("DataStore.Core.Models.LicenseApplication", "LicenseApplication")
                        .WithOne("License")
                        .HasForeignKey("DataStore.Core.Models.License", "LicenseApplicationId");

                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany("Licenses")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseApplication");

                    b.Navigation("Member");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApplication", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.LicenseApprovalLevel", "CurrentApprovalLevel")
                        .WithMany()
                        .HasForeignKey("CurrentApprovalLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentApprovalLevel");

                    b.Navigation("Member");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApplicationApproval", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataStore.Core.Models.LicenseApplication", "LicenseApplication")
                        .WithMany()
                        .HasForeignKey("LicenseApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.LicenseApprovalLevel", "LicenseApprovalLevel")
                        .WithMany()
                        .HasForeignKey("LicenseApprovalLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LicenseApplication");

                    b.Navigation("LicenseApprovalLevel");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalComment", b =>
                {
                    b.HasOne("DataStore.Core.Models.LicenseApprovalHistory", "ApprovalHistory")
                        .WithMany("Comments")
                        .HasForeignKey("ApprovalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalHistory");

                    b.Navigation("CommentedBy");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalHistory", b =>
                {
                    b.HasOne("DataStore.Core.Models.LicenseApprovalLevel", "ApprovalLevel")
                        .WithMany()
                        .HasForeignKey("ApprovalLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.LicenseApplication", "LicenseApplication")
                        .WithMany("LicenseApprovalHistories")
                        .HasForeignKey("LicenseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalLevel");

                    b.Navigation("ChangedBy");

                    b.Navigation("LicenseApplication");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalLevel", b =>
                {
                    b.HasOne("DataStore.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataStore.Core.Models.Member", b =>
                {
                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("DataStore.Core.Models.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId");

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Firm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataStore.Core.Models.MemberQualification", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QualificationType", "QualificationType")
                        .WithMany()
                        .HasForeignKey("QualificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("QualificationType");
                });

            modelBuilder.Entity("DataStore.Core.Models.Message", b =>
                {
                    b.HasOne("DataStore.Core.Models.Committee", "Committee")
                        .WithMany("Messages")
                        .HasForeignKey("CommitteeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Thread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId");

                    b.Navigation("Committee");

                    b.Navigation("CreatedBy");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("DataStore.Core.Models.NotaryPublic", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.Penalty", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Penalties")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.InvoiceRequest", "InvoiceRequest")
                        .WithMany()
                        .HasForeignKey("InvoiceRequestId");

                    b.HasOne("DataStore.Core.Models.Member", "Member")
                        .WithMany("Penalties")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.PenaltyType", "PenaltyType")
                        .WithMany("Penalties")
                        .HasForeignKey("PenaltyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("InvoiceRequest");

                    b.Navigation("Member");

                    b.Navigation("PenaltyType");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.PenaltyPayment", b =>
                {
                    b.HasOne("DataStore.Core.Models.Penalty", "Penalty")
                        .WithMany("PenaltyPayments")
                        .HasForeignKey("PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QBInvoice", "QBInvoice")
                        .WithMany()
                        .HasForeignKey("QBInvoiceId");

                    b.Navigation("Penalty");

                    b.Navigation("QBInvoice");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBono", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataStore.Core.Models.ProBonoApplication", "ProBonoApplication")
                        .WithMany()
                        .HasForeignKey("ProBonoApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProbonoClient", "ProbonoClient")
                        .WithMany()
                        .HasForeignKey("ProbonoClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ProBonoApplication");

                    b.Navigation("ProbonoClient");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBonoApplication", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataStore.Core.Models.ProbonoClient", "ProbonoClient")
                        .WithMany()
                        .HasForeignKey("ProbonoClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ProbonoClient");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBonoReport", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProBono", "ProBono")
                        .WithMany("ProBonoReports")
                        .HasForeignKey("ProBonoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("ProBono");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProbonoClient", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DataStore.Core.Models.PropBonoReportFeedback", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "FeedBackBy")
                        .WithMany()
                        .HasForeignKey("FeedBackById");

                    b.HasOne("DataStore.Core.Models.ProBonoReport", "ProBonoReport")
                        .WithMany()
                        .HasForeignKey("ProBonoReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedBackBy");

                    b.Navigation("ProBonoReport");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBInvoice", b =>
                {
                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBPayment", b =>
                {
                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QBInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DataStore.Core.Models.QBReceipt", b =>
                {
                    b.HasOne("DataStore.Core.Models.QBCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QBInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DataStore.Core.Models.Signature", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.Stamp", b =>
                {
                    b.HasOne("DataStore.Core.Models.YearOfOperation", "YearOfOperation")
                        .WithMany()
                        .HasForeignKey("YearOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearOfOperation");
                });

            modelBuilder.Entity("DataStore.Core.Models.Subcommittee", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", "Chairperson")
                        .WithMany()
                        .HasForeignKey("ChairpersonId");

                    b.HasOne("DataStore.Core.Models.Committee", "ParentCommittee")
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chairperson");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentCommittee");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeMembership", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "MemberShip")
                        .WithMany()
                        .HasForeignKey("MemberShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Subcommittee", "Subcommittee")
                        .WithMany("SubcommitteeMemberships")
                        .HasForeignKey("SubcommitteeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberShip");

                    b.Navigation("Subcommittee");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeMessage", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Subcommittee", "Subcommittee")
                        .WithMany("SubcommitteeMessages")
                        .HasForeignKey("SubcommitteeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.SubcommitteeThread", "SubcommitteeThread")
                        .WithMany("SubcommitteeMessages")
                        .HasForeignKey("SubcommitteeThreadId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Subcommittee");

                    b.Navigation("SubcommitteeThread");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeThread", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.Subcommittee", "Subcommittee")
                        .WithMany("SubcommitteeThreads")
                        .HasForeignKey("SubcommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Subcommittee");
                });

            modelBuilder.Entity("DataStore.Core.Models.Thread", b =>
                {
                    b.HasOne("DataStore.Core.Models.Committee", "Committee")
                        .WithMany("Threads")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("MemberProBono", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ProBono", null)
                        .WithMany()
                        .HasForeignKey("ProBonosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberQualificationType", b =>
                {
                    b.HasOne("DataStore.Core.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.QualificationType", null)
                        .WithMany()
                        .HasForeignKey("QualificationTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataStore.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataStore.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStore.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataStore.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataStore.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("DataStore.Core.Models.CPDTraining", b =>
                {
                    b.Navigation("CPDTrainingRegistration");

                    b.Navigation("CPDUnitsEarned");
                });

            modelBuilder.Entity("DataStore.Core.Models.Committee", b =>
                {
                    b.Navigation("CommitteeMemberships");

                    b.Navigation("Messages");

                    b.Navigation("Threads");
                });

            modelBuilder.Entity("DataStore.Core.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataStore.Core.Models.Firm", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApplication", b =>
                {
                    b.Navigation("License")
                        .IsRequired();

                    b.Navigation("LicenseApprovalHistories");
                });

            modelBuilder.Entity("DataStore.Core.Models.LicenseApprovalHistory", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataStore.Core.Models.Member", b =>
                {
                    b.Navigation("CPDTrainingRegistrations");

                    b.Navigation("Licenses");

                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("DataStore.Core.Models.Penalty", b =>
                {
                    b.Navigation("PenaltyPayments");
                });

            modelBuilder.Entity("DataStore.Core.Models.PenaltyType", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("DataStore.Core.Models.ProBono", b =>
                {
                    b.Navigation("ProBonoReports");
                });

            modelBuilder.Entity("DataStore.Core.Models.Subcommittee", b =>
                {
                    b.Navigation("SubcommitteeMemberships");

                    b.Navigation("SubcommitteeMessages");

                    b.Navigation("SubcommitteeThreads");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeMessage", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("DataStore.Core.Models.SubcommitteeThread", b =>
                {
                    b.Navigation("SubcommitteeMessages");
                });

            modelBuilder.Entity("DataStore.Core.Models.Thread", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
